	-- MySQL Script generated by MySQL Workbench
	-- Sun May 25 16:57:56 2025
	-- Model: New Model    Version: 1.0
	-- MySQL Workbench Forward Engineering

	SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
	SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
	SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

	-- -----------------------------------------------------
	-- Schema mocuti
	-- -----------------------------------------------------
	CREATE SCHEMA IF NOT EXISTS `mocuti` DEFAULT CHARACTER SET utf8 ;
	USE `mocuti` ;

	-- -----------------------------------------------------
	-- Table `mocuti`.`endereco`
	-- -----------------------------------------------------
	CREATE TABLE IF NOT EXISTS `mocuti`.`endereco` (
	  `id_endereco` INT NOT NULL AUTO_INCREMENT,
	  `cep` VARCHAR(9) NOT NULL,
	  `logradouro` VARCHAR(125) NOT NULL,
	  `numero` INT NOT NULL,
	  `complemento` VARCHAR(255) NULL,
	  `uf` VARCHAR(2) NOT NULL,
	  `estado` VARCHAR(45) NOT NULL,
	  `bairro` VARCHAR(125) NOT NULL,
	  PRIMARY KEY (`id_endereco`))
	ENGINE = InnoDB;

	-- -----------------------------------------------------
	-- Table `mocuti`.`canal_comunicacao`
	-- -----------------------------------------------------
	CREATE TABLE IF NOT EXISTS `mocuti`.`canal_comunicacao` (
	  `id_canal_comunicacao` INT NOT NULL AUTO_INCREMENT,
	  `tipo_canal_comunicacao` VARCHAR(45) NULL,
	  PRIMARY KEY (`id_canal_comunicacao`))
	ENGINE = InnoDB;

	-- -----------------------------------------------------
	-- Table `mocuti`.`cargo`
	-- -----------------------------------------------------
	CREATE TABLE IF NOT EXISTS `mocuti`.`cargo` (
	  `id_cargo` INT NOT NULL AUTO_INCREMENT,
	  `tipo_cargo` VARCHAR(45) NULL,
	  PRIMARY KEY (`id_cargo`))
	ENGINE = InnoDB;

	-- -----------------------------------------------------
	-- Table `mocuti`.`usuario`
	-- -----------------------------------------------------
	CREATE TABLE IF NOT EXISTS `mocuti`.`usuario` (
	  `id_usuario` INT NOT NULL AUTO_INCREMENT,
	  `nome_completo` VARCHAR(125),
	  `CPF` VARCHAR(14) NULL,
	  `telefone` VARCHAR(15) NULL,
	  `email` VARCHAR(125),
	  `dt_nasc` DATE,
	  `etnia` VARCHAR(125),
	  `nacionalidade` VARCHAR(125),
	  `genero` VARCHAR(45),
	  `senha` VARCHAR(60),
	  `is_ativo` TINYINT,
	  `dt_cadastro`DATE NOT NULL,
	  `dt_desativacao` DATE NULL,
	  `is_autenticado` boolean,
	  `fk_endereco_usuario` INT NOT NULL,
	  `fk_cargo_usuario` INT NOT NULL,
	  `fk_canal_comunicacao_usuario` INT NOT NULL,
	  PRIMARY KEY (`id_usuario`),
	  INDEX `fk_usuario_endereco1_idx` (`fk_endereco_usuario` ASC) VISIBLE,
	  INDEX `fk_usuario_canal_comunicacao1_idx` (`fk_canal_comunicacao_usuario` ASC) VISIBLE,
	  INDEX `fk_usuario_cargo1_idx` (`fk_cargo_usuario` ASC) VISIBLE,
	  CONSTRAINT `fk_usuario_endereco1`
		FOREIGN KEY (`fk_endereco_usuario`)
		REFERENCES `mocuti`.`endereco` (`id_endereco`)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION,
	  CONSTRAINT `fk_usuario_canal_comunicacao1`
		FOREIGN KEY (`fk_canal_comunicacao_usuario`)
		REFERENCES `mocuti`.`canal_comunicacao` (`id_canal_comunicacao`)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION,
	  CONSTRAINT `fk_usuario_cargo1`
		FOREIGN KEY (`fk_cargo_usuario`)
		REFERENCES `mocuti`.`cargo` (`id_cargo`)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION)
	ENGINE = InnoDB;

use mocuti;

	-- -----------------------------------------------------
	-- Table `mocuti`.`status_evento`
	-- -----------------------------------------------------
	CREATE TABLE IF NOT EXISTS `mocuti`.`status_evento` (
	  `id_status_evento` INT NOT NULL AUTO_INCREMENT,
	  `situacao` VARCHAR(45) NOT NULL,
	  PRIMARY KEY (`id_status_evento`))
	ENGINE = InnoDB;

	-- -----------------------------------------------------
	-- Table `mocuti`.`categoria`
	-- -----------------------------------------------------
	CREATE TABLE IF NOT EXISTS `mocuti`.`categoria` (
	  `id_categoria` INT NOT NULL AUTO_INCREMENT,
	  `nome` VARCHAR(125) NULL,
	  `descricao` VARCHAR(255) NULL,
	  PRIMARY KEY (`id_categoria`))
	ENGINE = InnoDB;

	-- -----------------------------------------------------
	-- Table `mocuti`.`evento`
	-- -----------------------------------------------------
	CREATE TABLE IF NOT EXISTS `mocuti`.`evento` (
	  `id_evento` INT NOT NULL AUTO_INCREMENT,
	  `nome_evento` VARCHAR(125),
	  `descricao` VARCHAR(255),
	  `dia` DATE,
	  `hora_inicio` TIME,
	  `hora_fim` TIME,
	  `is_aberto` TINYINT,
	  `qtd_vaga` INT NULL,
	  `qtd_interessado` INT NULL,
	  `publico_alvo` VARCHAR(125) NOT NULL,
	  `foto` MEDIUMBLOB NULL,
	  `fk_endereco_evento` INT NOT NULL,
	  `fk_status_evento` INT NOT NULL,
	  `fk_categoria_evento` INT NOT NULL,
	  PRIMARY KEY (`id_evento`),
	  INDEX `fk_evento_endereco1_idx` (`fk_endereco_evento` ASC) VISIBLE,
	  INDEX `fk_evento_status_evento1_idx` (`fk_status_evento` ASC) VISIBLE,
	  INDEX `fk_evento_categoria1_idx` (`fk_categoria_evento` ASC) VISIBLE,
	  CONSTRAINT `fk_evento_endereco1`
		FOREIGN KEY (`fk_endereco_evento`)
		REFERENCES `mocuti`.`endereco` (`id_endereco`)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION,
	  CONSTRAINT `fk_evento_status_evento1`
		FOREIGN KEY (`fk_status_evento`)
		REFERENCES `mocuti`.`status_evento` (`id_status_evento`)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION,
	  CONSTRAINT `fk_evento_categoria1`
		FOREIGN KEY (`fk_categoria_evento`)
		REFERENCES `mocuti`.`categoria` (`id_categoria`)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION)
	ENGINE = InnoDB;

	-- -----------------------------------------------------
	-- Table `mocuti`.`status_inscricao`
	-- -----------------------------------------------------
	CREATE TABLE IF NOT EXISTS `mocuti`.`status_inscricao` (
	  `id_status_inscricao` INT NOT NULL AUTO_INCREMENT,
	  `tipo_inscricao` VARCHAR(45) NULL,
	  PRIMARY KEY (`id_status_inscricao`))
	ENGINE = InnoDB;

	-- -----------------------------------------------------
	-- Table `mocuti`.`participacao`
	-- -----------------------------------------------------
	CREATE TABLE IF NOT EXISTS `mocuti`.`participacao` (
	-- não pd ser AUTO_INCREMENT pq depende da junção das outras
	  `fk_usuario_participacao` INT NOT NULL,
	  `fk_evento_participacao` INT NOT NULL,
	  `is_inscrito` TINYINT NULL,
	  `is_presente` TINYINT NULL,
	  `fk_inscricao_participacao` INT NOT NULL,
	  PRIMARY KEY (`fk_usuario_participacao`, `fk_evento_participacao`),
	  INDEX `fk_usuario_has_evento_evento1_idx` (`fk_evento_participacao` ASC) VISIBLE,
	  INDEX `fk_usuario_has_evento_usuario_idx` (`fk_usuario_participacao` ASC) VISIBLE,
	  INDEX `fk_participacao_status_inscricao1_idx` (`fk_inscricao_participacao` ASC) VISIBLE,
	  CONSTRAINT `fk_usuario_has_evento_usuario`
		FOREIGN KEY (`fk_usuario_participacao`)
		REFERENCES `mocuti`.`usuario` (`id_usuario`)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION,
	  CONSTRAINT `fk_usuario_has_evento_evento1`
		FOREIGN KEY (`fk_evento_participacao`)
		REFERENCES `mocuti`.`evento` (`id_evento`)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION,
	  CONSTRAINT `fk_participacao_status_inscricao1`
		FOREIGN KEY (`fk_inscricao_participacao`)
		REFERENCES `mocuti`.`status_inscricao` (`id_status_inscricao`)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION)
	ENGINE = InnoDB;

	-- -----------------------------------------------------
	-- Table `mocuti`.`nota_feedback`
	-- -----------------------------------------------------
	CREATE TABLE IF NOT EXISTS `mocuti`.`nota_feedback` (
	  `id_nota_feedback` INT NOT NULL AUTO_INCREMENT,
	  `tipo_nota` VARCHAR(45) NULL,
	  PRIMARY KEY (`id_nota_feedback`))
	ENGINE = InnoDB;

	-- -----------------------------------------------------
	-- Table `mocuti`.`feedback`
	-- -----------------------------------------------------
	CREATE TABLE IF NOT EXISTS `mocuti`.`feedback` (
  `id_feedback` INT NOT NULL AUTO_INCREMENT,
  `comentario` VARCHAR(255) NULL,
  `data_feedback` DATE NOT NULL,
  `fk_evento_feedback` INT NOT NULL,
  `fk_usuario_feedback` INT NOT NULL,
  `fk_nota_feedback` INT NULL,
  PRIMARY KEY (`id_feedback`),
  UNIQUE KEY `uq_feedback_usuario_evento` (`fk_usuario_feedback`, `fk_evento_feedback`),
  INDEX `fk_feedbak_evento1_idx` (`fk_evento_feedback` ASC),
  INDEX `fk_feedback_usuario1_idx` (`fk_usuario_feedback` ASC),
  INDEX `fk_feedback_nota1_idx` (`fk_nota_feedback` ASC),
  CONSTRAINT `fk_feedbak_evento1`
    FOREIGN KEY (`fk_evento_feedback`)
    REFERENCES `mocuti`.`evento` (`id_evento`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_feedback_usuario1`
    FOREIGN KEY (`fk_usuario_feedback`)
    REFERENCES `mocuti`.`usuario` (`id_usuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_feedback_nota1`
    FOREIGN KEY (`fk_nota_feedback`)
    REFERENCES `mocuti`.`nota_feedback` (`id_nota_feedback`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
) ENGINE = InnoDB;

	-- -----------------------------------------------------
	-- Table `mocuti`.`preferencia`
	-- -----------------------------------------------------
	CREATE TABLE IF NOT EXISTS `mocuti`.`preferencia` (
	  `id_preferencia` INT NOT NULL AUTO_INCREMENT,
	  `fk_usuario_preferencia` INT NOT NULL,
	  `fk_categoria_preferencia` INT NOT NULL,
	  PRIMARY KEY (`id_preferencia`, `fk_usuario_preferencia`, `fk_categoria_preferencia`),
	  INDEX `fk_usuario_has_categoria_categoria1_idx` (`fk_categoria_preferencia` ASC) VISIBLE,
	  INDEX `fk_usuario_has_categoria_usuario1_idx` (`fk_usuario_preferencia` ASC) VISIBLE,
	  CONSTRAINT `fk_usuario_has_categoria_usuario1`
		FOREIGN KEY (`fk_usuario_preferencia`)
		REFERENCES `mocuti`.`usuario` (`id_usuario`)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION,
	  CONSTRAINT `fk_usuario_has_categoria_categoria1`
		FOREIGN KEY (`fk_categoria_preferencia`)
		REFERENCES `mocuti`.`categoria` (`id_categoria`)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION)
	ENGINE = InnoDB;

	SET SQL_MODE=@OLD_SQL_MODE;
	SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
	SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

	-- ------------------------------------------------------
	-- INSERTS PARA TESTE DA API
	-- ------------------------------------------------------

	-- endereco
	INSERT INTO endereco (cep, logradouro, numero, complemento, uf, estado, bairro) VALUES
	('12345678', 'Rua A', 123, 'Apto 101', 'SP', 'São Paulo', 'Centro'),
	('98765432', 'Rua B', 456, 'Apto 202', 'RJ', 'Rio de Janeiro', 'Copacabana');

	-- canal_comunicacao
	INSERT INTO canal_comunicacao (tipo_canal_comunicacao) VALUES
	('Email'),
	('WhatsApp'),
	('SMS');

	-- cargo
	INSERT INTO cargo (tipo_cargo) VALUES
	('Administrador'),
	('Usuário'),
	('Moderador');

	-- usuario
	INSERT INTO usuario (nome_completo, CPF, telefone, email, dt_nasc, etnia, nacionalidade, genero, senha, is_ativo, dt_cadastro, dt_desativacao,
	is_autenticado,fk_cargo_usuario, fk_endereco_usuario, fk_canal_comunicacao_usuario) VALUES
	-- Mulheres
	('Beatriz Oliveira', '111.222.333-44', '(71) 91234-5678', 'beatriz.oliveira@email.com', '1990-02-20', 'amarelo', 'Brasileiro', 'Prefiro não identificar', 'senha015', TRUE, '2025-08-25', NULL, FALSE, 1, 1, 1),
	('Camila Santos', '222.333.444-55', '(81) 98765-4321', 'camila.santos@email.com', '1994-08-15', 'Pardo', 'Boliviano', 'Feminino', 'senha016', TRUE, '2025-08-25', NULL, FALSE, 2, 2, 2),
	('Juliana Costa', '333.444.555-66', '(91) 99876-5432', 'juliana.costa@email.com', '1996-12-05', 'Indígena', 'Bransileiro','Feminino', 'senha017', TRUE, '2025-08-25', NULL, FALSE, 3, 2, 3),

	-- Homens
	('Lucas Almeida', '444.555.666-77', '(61) 91234 6789', 'lucas.almeida@email.com', '1987-03-10', 'Negro', 'Bransileiro', 'Masculino', 'senha018', TRUE, '2025-08-25', NULL, FALSE, 1, 1, 1),
	('Gabriel Souza', '555.666.777-88', '(71) 98765-1234', 'gabriel.souza@email.com', '1992-06-25', 'Branco', 'Bransileiro', 'Prefiro não identificar', 'senha019', TRUE, '2025-08-25', NULL, FALSE, 2, 2, 2);

	-- status_evento
	INSERT INTO status_evento (situacao) VALUES
	('Aberto'),
	('Encerrado'),
	('Em andamento');

	-- categoria
	INSERT INTO categoria (nome, descricao) VALUES
	('Palestra', 'Palestras tematicas com power point'),
	('Doação', 'Evento de doação de roupas e/ou brinquedos'),
	('Carnaval', 'Comemoração carnaval'),
	('Apadrinhamento', 'Doação de brinquedos e roupas para crianças');

	-- evento
	INSERT INTO evento (nome_evento, descricao, dia, hora_inicio, hora_fim, is_aberto, qtd_vaga,
	 qtd_interessado, publico_alvo, foto, fk_endereco_evento, fk_status_evento, fk_categoria_evento) VALUES
	('Oficina de Pintura', 'Aprenda técnicas básicas de pintura.', '2025-06-15', '14:00:00', '17:00:00', 1, 30, 10, 'Jovens', NULL, 1, 1, 1),
	('Torneio de Futsal', 'Competição entre equipes locais.', '2025-06-20', '09:00:00', '12:00:00', 1, 20, 5 , 'Crianças', NULL, 2, 1, 2),
	('Palestra sobre Meio Ambiente', 'Discussão sobre sustentabilidade.', '2025-07-10', '10:00:00', '12:00:00', 1, 50, 20, 'Mulheres Negras', NULL, 2, 1, 3);

	-- status_inscricao
	INSERT INTO status_inscricao (tipo_inscricao) VALUES
	('Pendente'),
	('Confirmada'),
	('Cancelada');

	-- participacao
	INSERT INTO participacao (fk_usuario_participacao, fk_evento_participacao, is_inscrito, is_presente, fk_inscricao_participacao) VALUES
	(1, 1, 1, 1, 1),
	(2, 1, 1, 0, 3),
	(3, 2, 1, 1, 1),
	(4, 3, 1, 0, 3),
	(5, 3, 1, 1, 1);

	-- nota
	INSERT INTO nota_feedback (tipo_nota) VALUES
	('like'),
	('dislike');

	-- feedback
	INSERT INTO feedback (comentario, data_feedback, fk_evento_feedback, fk_usuario_feedback, fk_nota_feedback) VALUES
	(null, '2025-07-10', 1, 1, 1),
	('Gostei bastante da palestra.', '2025-07-10', 3, 2, 2),
	('Achei que poderia ter mais tempo.', '2025-07-10', 3, 3, null);

-- preferencia
INSERT INTO preferencia (fk_usuario_preferencia, fk_categoria_preferencia) VALUES
(1, 1),
(1, 3),
(2, 2),
(3, 4),
(4, 2);

SELECT id_usuario, nome_completo, id_cargo, tipo_cargo FROM usuario
inner join cargo
on fk_cargo_usuario = id_cargo
where id_cargo = 1;


select * from usuario;
SELECT * FROM cargo;
SELECT * FROM endereco;
SELECT * FROM canal_comunicacao;
SELECT * FROM categoria;
SELECT * FROM preferencia;
SELECT * FROM evento;
SELECT * FROM status_evento;
SELECT * FROM nota_feedback;
SELECT * FROM feedback;

-- VIEWS --
-- 1. Visão Geral de Usuários OK
CREATE OR REPLACE VIEW visao_geral_usuarios AS
SELECT
(SELECT COUNT(*) FROM usuario WHERE is_ativo = 1) AS total_usuarios_ativos,
(SELECT COUNT(*) FROM usuario WHERE is_ativo = 0) AS total_usuarios_inativos,
(SELECT COUNT(*) FROM usuario u
JOIN cargo c ON u.fk_cargo_usuario = c.id_cargo
WHERE u.is_ativo = 1 AND c.tipo_cargo = 'Administrador') AS total_m1_ativos,
(SELECT COUNT(*) FROM usuario u
JOIN cargo c ON u.fk_cargo_usuario = c.id_cargo
WHERE u.is_ativo = 0 AND c.tipo_cargo = 'Administrador') AS total_m1_inativos,
(SELECT COUNT(*) FROM usuario u
JOIN cargo c ON u.fk_cargo_usuario = c.id_cargo
WHERE u.is_ativo = 1 AND c.tipo_cargo = 'Colaborador') AS total_m2_ativos,
(SELECT COUNT(*) FROM usuario u
JOIN cargo c ON u.fk_cargo_usuario = c.id_cargo
WHERE u.is_ativo = 0 AND c.tipo_cargo = 'Colaborador') AS total_m2_inativos,
(SELECT COUNT(*) FROM usuario u
JOIN cargo c ON u.fk_cargo_usuario = c.id_cargo
WHERE u.is_ativo = 1 AND c.tipo_cargo = 'Participante') AS total_beneficiarios_ativos,
(SELECT COUNT(*) FROM usuario u
JOIN cargo c ON u.fk_cargo_usuario = c.id_cargo
WHERE u.is_ativo = 0 AND c.tipo_cargo = 'Participante') AS total_beneficiarios_inativos;

select * from visao_geral_usuarios;


-- 2. Rank Categoria OK
CREATE OR REPLACE VIEW rank_categoria AS
SELECT c.id_categoria, c.nome, c.descricao, COUNT(p.id_preferencia) AS total_votos
FROM categoria c
LEFT JOIN preferencia p ON p.fk_categoria_preferencia = c.id_categoria
GROUP BY c.id_categoria, c.nome, c.descricao
ORDER BY total_votos DESC;

-- 3. Feedbacks por Categoria OK
CREATE OR REPLACE VIEW feedbacks_por_categoria AS
SELECT  ce.nome AS categoria, COUNT(CASE WHEN nf.tipo_nota = 'Excelente' THEN 1 END) AS qtd_positivos,
COUNT(CASE WHEN nf.tipo_nota = 'Ruim' THEN 1 END) AS qtd_negativos, COUNT(f.id_feedback) AS qtd_total
FROM categoria ce
LEFT JOIN evento e ON e.fk_categoria_evento = ce.id_categoria
LEFT JOIN feedback f ON f.fk_evento_feedback = e.id_evento
LEFT JOIN nota_feedback nf ON nf.id_nota_feedback = f.fk_nota_feedback
GROUP BY ce.nome;

-- 4. Feedback por Categoria no Mês Atual
CREATE OR REPLACE VIEW feedback_categoria_mes_atual AS
SELECT c.nome AS categoria, COUNT(CASE WHEN nf.tipo_nota = 'like' THEN 1 END) AS qtd_positivos,
COUNT(CASE WHEN nf.tipo_nota = 'dislike' THEN 1 END) AS qtd_negativos, COUNT(f.id_feedback) AS qtd_total
FROM categoria c
LEFT JOIN evento e ON e.fk_categoria_evento = c.id_categoria
LEFT JOIN feedback f ON f.fk_evento_feedback = e.id_evento
LEFT JOIN nota_feedback nf ON nf.id_nota_feedback = f.fk_nota_feedback
WHERE YEAR(f.data_feedback) = YEAR(CURDATE())
AND MONTH(f.data_feedback) = MONTH(CURDATE())
GROUP BY c.nome;

-- 5. Inscrições por Mês no Ano Atual (precisa de data na tabela usuário)
CREATE OR REPLACE VIEW inscricoes_mes_durante_ano AS
SELECT MONTHNAME(dt_cadastro) AS mes, MONTH(dt_cadastro) AS numero_mes, COUNT(*) AS total_cadastros
FROM usuario
WHERE YEAR(dt_cadastro) = YEAR(CURDATE())
GROUP BY numero_mes, mes
ORDER BY numero_mes;

-- 7. Dados do Usuário OK - acho que isso aq é a view do get de usuario, acho que não precisa
CREATE OR REPLACE VIEW dados_usuario AS
SELECT u.id_usuario, u.nome_completo, u.CPF, u.telefone, u.email,
u.dt_nasc, u.genero, u.senha, u.is_ativo, u.dt_desativacao,
u.is_autenticado, e.id_endereco, e.CEP, e.logradouro,
e.numero, e.complemento, e.uf, e.estado, e.bairro, c.id_cargo,
c.tipo_cargo, cc.id_canal_comunicacao, cc.tipo_canal_comunicacao
FROM mocuti.usuario u
JOIN mocuti.endereco e ON u.fk_endereco_usuario = e.id_endereco
JOIN mocuti.cargo c ON u.fk_cargo_usuario = c.id_cargo
JOIN mocuti.canal_comunicacao cc ON u.fk_canal_comunicacao_usuario = cc.id_canal_comunicacao;

-- 8. Eventos por Usuário OK
CREATE OR REPLACE VIEW eventos_usuario AS
SELECT
e.id_evento,
e.nome_evento,
e.dia AS data_evento,
e.hora_inicio,
se.situacao AS status_evento,
e.descricao,
ender.logradouro AS local,
p.fk_usuario_participacao AS id_usuario
FROM mocuti.evento e
JOIN mocuti.participacao p ON p.fk_evento_participacao = e.id_evento
JOIN mocuti.status_evento se ON se.id_status_evento = e.fk_status_evento
JOIN mocuti.endereco ender ON ender.id_endereco = e.fk_endereco_evento
WHERE p.fk_usuario_participacao IS NOT NULL;

CREATE OR REPLACE VIEW publico_alvo_genero AS
SELECT genero, COUNT(*) AS total, ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM usuario), 2) AS percentual
FROM usuario
GROUP BY genero;

CREATE OR REPLACE VIEW faixa_etaria_usuarios_ativos AS
SELECT COUNT(*) AS total_ativos,
SUM(CASE WHEN TIMESTAMPDIFF(YEAR, dt_nasc, CURDATE()) <= 15 THEN 1 ELSE 0 END) AS ate_15,
SUM(CASE WHEN TIMESTAMPDIFF(YEAR, dt_nasc, CURDATE()) BETWEEN 16 AND 24 THEN 1 ELSE 0 END) AS de_16_a_24,
SUM(CASE WHEN TIMESTAMPDIFF(YEAR, dt_nasc, CURDATE()) BETWEEN 25 AND 40 THEN 1 ELSE 0 END) AS de_25_a_40,
SUM(CASE WHEN TIMESTAMPDIFF(YEAR, dt_nasc, CURDATE()) > 40 THEN 1 ELSE 0 END) AS acima_de_40
FROM usuario WHERE is_ativo = 1;

-- 11. Feedback por Evento OK
CREATE OR REPLACE VIEW feedback_evento AS
SELECT
  f.id_feedback AS id_feedback,
  f.comentario AS descricao_feedback,
  nf.tipo_nota AS nota,
  f.fk_evento_feedback AS id_evento,
  e.nome_evento,
  f.fk_usuario_feedback AS id_usuario,
  u.nome_completo AS nome_usuario,
  u.email
FROM
  mocuti.feedback f
JOIN
  mocuti.usuario u ON f.fk_usuario_feedback = u.id_usuario
JOIN
  mocuti.evento e ON f.fk_evento_feedback = e.id_evento
LEFT JOIN
  mocuti.nota_feedback nf ON f.fk_nota_feedback = nf.id_nota_feedback;